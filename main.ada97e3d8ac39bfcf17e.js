webpackJsonp([1],{DOf8:function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n("U7vG"),u=function(e){return e&&e.__esModule?e:{default:e}}(i),s=[],c=function(e){function t(e){r(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={developers:[],search:""},n}return a(t,e),l(t,[{key:"componentDidMount",value:function(){var e=this,t="shreyas-a";location.host&&-1!==location.host.indexOf(".github.io")&&(t=location.host.split(".github.io")[0]),fetch("https://api.github.com/repos/"+t+"/awesome-developers/contents/developers.json").then(function(e){return e.json()}).then(function(e){return atob(e.content)}).then(function(e){return JSON.parse(e)}).then(function(t){s=t,e.setState({developers:s})})}},{key:"searchDeveloper",value:function(e){var t=s;t=t.filter(function(t){return-1!==t.name.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.company.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.github.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.city.toLowerCase().search(e.target.value.toLowerCase())||t.skills.find(function(t){return t.includes(e.target.value.toLowerCase())})}),this.setState({developers:t})}},{key:"componentWillMount",value:function(){this.setState({developers:s})}},{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement("h1",null,"Awesome Developers"),u.default.createElement("input",{type:"text",placeholder:"Search",onChange:this.searchDeveloper.bind(this)}),u.default.createElement("div",null,u.default.createElement("p",null,"A curated list of awesome developers."),u.default.createElement("div",{className:"developer-list"},this.state.developers.map(function(e,t){return u.default.createElement("div",{className:"developer",key:t},u.default.createElement("img",{src:"https://avatars.githubusercontent.com/"+e.github,className:"profile-image",alt:"Profile Image"}),u.default.createElement("div",null,e.name),u.default.createElement("div",null,e.skills.join(", ")),u.default.createElement("div",null,e.company),u.default.createElement("div",null,e.city),u.default.createElement("div",null,e.github))}))))}}]),t}(i.Component);t.default=c},"XgI/":function(e,t,n){t=e.exports=n("FZ+f")(void 0),t.push([e.i,".developer-list {\n  text-align: center; }\n\n.developer {\n  border: 1px solid grey;\n  border-radius: 10px;\n  padding: 10px;\n  margin: 10px;\n  width: 30%;\n  display: inline-block; }\n\n.profile-image {\n  width: 50px;\n  border-radius: 30px; }\n",""])},"Yq+E":function(e,t,n){var r=n("XgI/");"string"==typeof r&&(r=[[e.i,r,""]]);var o={};o.transform=void 0;n("MTIv")(r,o);r.locals&&(e.exports=r.locals)},qYAe:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var o=n("U7vG"),a=r(o),l=n("O27J"),i=n("DOf8"),u=r(i);n("Yq+E"),(0,l.render)(a.default.createElement(u.default,null),document.getElementById("root"))}},["qYAe"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,