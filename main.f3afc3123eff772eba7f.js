webpackJsonp([1],{DOf8:function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=n("U7vG"),s=function(e){return e&&e.__esModule?e:{default:e}}(i),d=[],c=function(e){function t(e){a(this,t);var n=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={developers:[]},n.searchDeveloper=n.searchDeveloper.bind(n),n}return o(t,e),l(t,[{key:"componentDidMount",value:function(){var e=this;fetch("https://api.github.com/repos/shreyas-a/awesome-developers/contents/developers.json").then(function(e){return e.json()}).then(function(e){return atob(e.content)}).then(function(e){return JSON.parse(e)}).then(function(t){d=t,e.setState({developers:d})})}},{key:"searchDeveloper",value:function(e){var t=d;t=t.filter(function(t){return-1!==t.name.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.company.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.city.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.github.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.email.toLowerCase().search(e.target.value.toLowerCase())||t.skills.find(function(t){return t.includes(e.target.value.toLowerCase())})}),this.setState({developers:t})}},{key:"render",value:function(){return s.default.createElement("div",null,s.default.createElement("br",null),s.default.createElement("div",{className:"hd1"},"Awesome Developers",s.default.createElement("br",null),s.default.createElement("small",null,"Curated list of awesome dev's Around the World")),s.default.createElement("div",{className:"search-div"},s.default.createElement("input",{type:"text",placeholder:"Search",onChange:this.searchDeveloper.bind(this),className:"search"})),s.default.createElement("div",null,s.default.createElement("div",{className:"developer-list"},this.state.developers.map(function(e,t){return s.default.createElement("div",{className:"developer",key:t},s.default.createElement("div",{className:"dev"},s.default.createElement("div",{className:"dev-avatar"},s.default.createElement("img",{src:"https://avatars.githubusercontent.com/"+e.github,className:"profile-image",alt:"Profile Image"})),s.default.createElement("div",{className:"dev-desc"},s.default.createElement("div",{className:"dev--name"},e.name),s.default.createElement("div",{className:"dev--company"},e.company),s.default.createElement("div",{className:"dev--city"},e.city),s.default.createElement("div",{className:"dev--email"},e.email)),s.default.createElement("div",{className:"dev--social"},s.default.createElement("a",{href:"https://github.com/"+e.github,target:"_blank"},s.default.createElement("img",{src:"/img/git.svg",alt:"git"})))),s.default.createElement("div",{className:"dev--skills"},e.skills.map(function(e,t){return s.default.createElement("span",{key:t},e)})))}))))}}]),t}(i.Component);t.default=c},"XgI/":function(e,t,n){t=e.exports=n("FZ+f")(void 0),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700);",""]),t.push([e.i,"body {\n  font-family: 'Roboto', sans-serif; }\n\n.hd1 {\n  text-align: center;\n  font-size: 30px;\n  font-weight: 300; }\n  .hd1 small {\n    font-size: 18px;\n    font-weight: 100; }\n\n.developer-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(25em, 1fr));\n  grid-gap: 25px; }\n\n.developer {\n  border-radius: 5px;\n  border: solid 1px #e2e2e2;\n  padding: 20px 15px;\n  margin: 5px;\n  display: inline-block;\n  box-shadow: 0 1px 6px 0 rgba(0, 0, 0, 0.12), 0 1px 6px 0 rgba(0, 0, 0, 0.12); }\n\n.profile-image {\n  width: 50px;\n  border-radius: 30px; }\n\n.search-div {\n  text-align: center;\n  margin: 30px auto; }\n  .search-div .search {\n    outline: none;\n    border-radius: 3px;\n    border: solid 1px #ccc;\n    padding: 0 10px;\n    height: 35px;\n    font-size: 16px;\n    font-weight: 300;\n    width: 400px; }\n\n.dev {\n  display: flex; }\n  .dev .dev-avatar {\n    flex: 1.5;\n    text-align: center; }\n  .dev .dev-desc {\n    flex: 5; }\n    .dev .dev-desc .dev--name {\n      font-size: 18px;\n      font-weight: 300; }\n    .dev .dev-desc .dev-company, .dev .dev-desc .dev--company, .dev .dev-desc .dev--city, .dev .dev-desc .dev--email {\n      color: #313131;\n      font-size: 15px;\n      font-weight: 300; }\n    .dev .dev-desc .dev--company {\n      margin-top: 10px; }\n  .dev .dev--social {\n    flex: 1;\n    text-align: right;\n    align-self: start;\n    margin-top: -10px; }\n    .dev .dev--social img {\n      margin: 10px 0;\n      width: 25px; }\n\n.dev--skills {\n  margin-top: 15px; }\n  .dev--skills span {\n    background: #2196f3;\n    border-radius: 5px 0 0 5px;\n    color: #fff;\n    font-size: 11px;\n    display: inline-block;\n    height: 25px;\n    line-height: 26px;\n    padding: 1px 12px 0 15px;\n    position: relative;\n    text-decoration: none;\n    -webkit-transition: color 0.2s;\n    text-transform: uppercase;\n    margin: 5px;\n    border-bottom: 0; }\n    .dev--skills span::before {\n      background: #fff;\n      border-radius: 10px;\n      box-shadow: inset 0 1px rgba(0, 0, 0, 0.25);\n      content: '';\n      height: 6px;\n      left: 5px;\n      position: absolute;\n      width: 6px;\n      top: 10px; }\n    .dev--skills span::after {\n      background: #fff;\n      border-bottom: 13px solid transparent;\n      border-left: 10px solid #2196f3;\n      border-top: 13px solid transparent;\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0; }\n",""])},"Yq+E":function(e,t,n){var a=n("XgI/");"string"==typeof a&&(a=[[e.i,a,""]]);var r={};r.transform=void 0;n("MTIv")(a,r);a.locals&&(e.exports=a.locals)},qYAe:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var r=n("U7vG"),o=a(r),l=n("O27J"),i=n("DOf8"),s=a(i);n("Yq+E"),(0,l.render)(o.default.createElement(s.default,null),document.getElementById("root"))}},["qYAe"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,