webpackJsonp([1],{DOf8:function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=n("U7vG"),s=function(e){return e&&e.__esModule?e:{default:e}}(i),d=[],c=function(e){for(var t=e,n=e.length;n;n-=1){var a=Math.floor(Math.random()*n),r=[t[a],t[n-1]];t[n-1]=r[0],t[a]=r[1]}return t},p=function(e){function t(e){a(this,t);var n=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isLoading:!0,developers:[]},n.searchDeveloper=n.searchDeveloper.bind(n),n}return o(t,e),l(t,[{key:"componentDidMount",value:function(){var e=this;fetch("https://api.github.com/repos/shreyas-a/awesome-developers/contents/developers.json").then(function(e){return e.json()}).then(function(e){return atob(e.content)}).then(function(e){return JSON.parse(e)}).then(function(t){var n=c(t);d=n,e.setState({isLoading:!1,developers:n})})}},{key:"searchDeveloper",value:function(e){var t=d;t=t.filter(function(t){return-1!==t.name.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.company.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.city.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.github.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.email.toLowerCase().search(e.target.value.toLowerCase())||t.skills.find(function(t){return t.toLowerCase().includes(e.target.value.toLowerCase())})}),this.setState({developers:t})}},{key:"render",value:function(){return s.default.createElement("div",null,s.default.createElement("br",null),s.default.createElement("div",{className:"hd1"}," Awesome Developers "),s.default.createElement("div",{className:"hd-small"},"Curated list of awesome developers around the world"),s.default.createElement("div",{className:"search-div"},s.default.createElement("input",{type:"text",placeholder:"Search",onChange:this.searchDeveloper,className:"search"})),s.default.createElement("div",null,this.state.isLoading?s.default.createElement("div",{className:"center"},s.default.createElement("img",{src:"/loader.gif",className:"loader",alt:"loader"})):s.default.createElement("div",{className:"developer-list"},this.state.developers.map(function(e,t){return s.default.createElement("div",{className:"developer",key:t},s.default.createElement("div",{className:"dev"},s.default.createElement("div",{className:"dev-avatar"},s.default.createElement("img",{src:"https://avatars.githubusercontent.com/"+e.github,className:"profile-image",alt:"Profile"})),s.default.createElement("div",{className:"dev-desc"},s.default.createElement("div",{className:"dev--name"},e.name),s.default.createElement("div",{className:"dev--company"},e.company),s.default.createElement("div",{className:"dev--city"},e.city),s.default.createElement("div",{className:"dev--email"},s.default.createElement("a",{href:"mailto:"+e.email,target:"_top"},e.email))),s.default.createElement("div",{className:"dev--social"},s.default.createElement("a",{href:"https://github.com/"+e.github,target:"_blank"},s.default.createElement("svg",{"aria-hidden":"true",className:"octicon octicon-mark-github",height:"25",version:"1.1",viewBox:"0 0 16 16",width:"32"},s.default.createElement("path",{fillRule:"evenodd",d:"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"}))))),s.default.createElement("div",{className:"dev--skills"},e.skills.map(function(e,t){return s.default.createElement("span",{key:t},e)})))}))),s.default.createElement("div",{className:"footer"},"Crafted with ",s.default.createElement("span",{className:"heart"},"â™¥")," in Bangalore, India"))}}]),t}(i.Component);t.default=p},"XgI/":function(e,t,n){t=e.exports=n("FZ+f")(void 0),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700);",""]),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Satisfy);",""]),t.push([e.i,"body {\n  font-family: 'Roboto', sans-serif; }\n\n.center {\n  text-align: center; }\n\n.loader {\n  height: 60px; }\n\n.hd1 {\n  text-align: center;\n  font-size: 30px;\n  font-weight: 300;\n  transition: 0.4s all ease; }\n\n.hd-small {\n  font-size: 18px;\n  font-weight: 100;\n  text-align: center;\n  margin: 10px 0; }\n\n.search-div {\n  text-align: center;\n  margin: 30px auto; }\n  .search-div .search {\n    outline: none;\n    border-radius: 3px;\n    border: solid 1px #dcdcdc;\n    padding: 0 10px;\n    height: 35px;\n    font-size: 16px;\n    font-weight: 300;\n    width: 400px; }\n\n.developer-list {\n  display: grid;\n  grid-template-columns: repeat(3, minmax(32%, 1fr));\n  grid-gap: 25px; }\n\n.developer {\n  border-radius: 5px;\n  border: solid 1px #dcdcdc;\n  padding: 20px 15px;\n  margin: 5px;\n  transition: 0.2s all ease; }\n  .developer:hover {\n    box-shadow: 0 1px 6px 0 rgba(0, 0, 0, 0.12), 0 1px 6px 0 rgba(0, 0, 0, 0.12); }\n\n.profile-image {\n  width: 50px;\n  border-radius: 30px; }\n\n.dev {\n  display: flex; }\n  .dev .dev-avatar {\n    flex: 1.5;\n    text-align: center; }\n  .dev .dev-desc {\n    flex: 5; }\n    .dev .dev-desc .dev--name {\n      font-size: 18px;\n      font-weight: 300; }\n    .dev .dev-desc .dev-company, .dev .dev-desc .dev--company, .dev .dev-desc .dev--city, .dev .dev-desc .dev--email {\n      color: #313131;\n      font-size: 15px;\n      font-weight: 300; }\n    .dev .dev-desc .dev--company {\n      margin-top: 10px; }\n  .dev .dev--social {\n    flex: 1;\n    text-align: right;\n    align-self: start; }\n    .dev .dev--social img {\n      margin: 10px 0;\n      width: 25px; }\n\n.dev--skills {\n  margin-top: 15px; }\n  .dev--skills span {\n    background: #2196f3;\n    border-radius: 5px 0 0 5px;\n    color: #fff;\n    font-size: 11px;\n    display: inline-block;\n    height: 25px;\n    line-height: 26px;\n    padding: 1px 12px 0 15px;\n    position: relative;\n    text-decoration: none;\n    -webkit-transition: color 0.2s;\n    text-transform: uppercase;\n    margin: 5px;\n    border-bottom: 0;\n    user-select: none; }\n    .dev--skills span::before {\n      background: #fff;\n      border-radius: 10px;\n      box-shadow: inset 0 1px rgba(0, 0, 0, 0.25);\n      content: '';\n      height: 6px;\n      left: 5px;\n      position: absolute;\n      width: 6px;\n      top: 10px; }\n    .dev--skills span::after {\n      background: #fff;\n      border-bottom: 13px solid transparent;\n      border-left: 10px solid #2196f3;\n      border-top: 13px solid transparent;\n      content: '';\n      position: absolute;\n      right: 0;\n      top: 0; }\n\n.footer {\n  font-family: 'Satisfy', cursive;\n  text-align: center;\n  margin: 30px 0; }\n  .footer .heart {\n    color: #f44336; }\n\n@media screen and (max-width: 992px) {\n  .developer-list {\n    grid-template-columns: repeat(2, minmax(48%, 1fr)); } }\n\n@media screen and (max-width: 798px) {\n  .developer-list {\n    grid-template-columns: repeat(2, minmax(100%, 1fr)); } }\n",""])},"Yq+E":function(e,t,n){var a=n("XgI/");"string"==typeof a&&(a=[[e.i,a,""]]);var r={};r.transform=void 0;n("MTIv")(a,r);a.locals&&(e.exports=a.locals)},qYAe:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var r=n("U7vG"),o=a(r),l=n("O27J"),i=n("DOf8"),s=a(i);n("Yq+E"),(0,l.render)(o.default.createElement(s.default,null),document.getElementById("root"))}},["qYAe"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,